#if 0
//
// Generated by 2.0.20353.0
//
//   fxc /Fh scanline.ps.h /Tps_3_0 filters\scanline.cg /Emain_fragment
//    /VnPSScanline
//
//
// Parameters:
//
//   sampler2D $s0;
//   float base_brightness;
//   float2 sine_comp;
//
//
// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   base_brightness c0       1
//   sine_comp       c1       1
//   $s0             s0       1
//
//
// Default values:
//
//   base_brightness
//     c0   = { 0.95, 0, 0, 0 };
//
//   sine_comp
//     c1   = { 0.05, 0.15, 0, 0 };
//

// Shader type: pixel 

xps_3_0
defconst $s0, sampler2d, object, [1, 1], s0
defconst base_brightness, float, scalar, [1, 1], c0, { 0.949999988, 0, 0, 0 }
defconst sine_comp, float, vector, [1, 2], c1, { 0.0500000007, 0.150000006, 0, 0 }
config AutoSerialize=false
config AutoResource=false
config PsMaxReg=2
// PsExportColorCount=1
// PsSampleControl=centers

dcl_texcoord r0.xy
dcl_texcoord2 r1.xy

def c252, 0, 0, 0, 0
def c253, 0, 0, 0, 0
def c254, 0, 0, 0, 0
def c255, -3.14159274, 0.5, 6.28318548, 0.159154937


    exec
    tfetch2D r2.xyz_, r0.xy, tf0
    alloc colors
    exec
    mul r1.zw, r0.yyyx, c255.w
    mad r1.xy, r1.zw, r1.yx, c255.y
    frc r1.xy, r1.xy
    mad r1.xy, r1.xy, c255.z, c255.x
    sin r1.x, r1.x
    sin r1.y, r1.y
    exece
    dp2add r1.x, r1.yx, c1.xy, c0.x
    mul oC0.xyz1, r1.x, r2.xyz

// PDB hint 00000000-00000000-00000000

#endif

// This microcode is in native DWORD byte order.

const DWORD PSScanline[] =
{
    0x102a1100, 0x00000154, 0x000000d0, 0x00000000, 0x00000024, 0x00000104, 
    0x0000012c, 0x00000000, 0x00000000, 0x000000dc, 0x0000001c, 0x000000cf, 
    0xffff0300, 0x00000003, 0x0000001c, 0x00000000, 0x000000c8, 0x00000058, 
    0x00030000, 0x00010000, 0x0000005c, 0x00000000, 0x0000006c, 0x00020000, 
    0x00010000, 0x0000007c, 0x0000008c, 0x0000009c, 0x00020001, 0x00010000, 
    0x000000a8, 0x000000b8, 0x24733000, 0x0004000c, 0x00010001, 0x00010000, 
    0x00000000, 0x62617365, 0x5f627269, 0x6768746e, 0x65737300, 0x00000003, 
    0x00010001, 0x00010000, 0x00000000, 0x3f733333, 0x00000000, 0x00000000, 
    0x00000000, 0x73696e65, 0x5f636f6d, 0x7000abab, 0x00010003, 0x00010002, 
    0x00010000, 0x00000000, 0x3d4ccccd, 0x3e19999a, 0x00000000, 0x00000000, 
    0x70735f33, 0x5f300032, 0x2e302e32, 0x30333533, 0x2e3000ab, 0x00000000, 
    0x00000001, 0x00000000, 0x00000000, 0x00000014, 0x01fc0010, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000040, 0x00000090, 0x10000200, 
    0x00000004, 0x00000000, 0x00001042, 0x00030003, 0x00000001, 0x00003050, 
    0x00003152, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xc0490fdb, 0x3f000000, 0x40c90fdb, 0x3e22f983, 0x00011002, 
    0x00001200, 0xc4000000, 0x00006003, 0x20091200, 0x22000000, 0x10082001, 
    0x1f1ffe88, 0x00004000, 0xc80c0101, 0x00711b00, 0xa100ff00, 0xc8030101, 
    0x001a6db1, 0xcb0101ff, 0xc8030101, 0x00b00000, 0xe8010000, 0xc8030101, 
    0x00b0c66c, 0x8b01ffff, 0xc0100101, 0x0000006c, 0xe2010101, 0xc0200101, 
    0x000000b1, 0xe2010101, 0xc8010101, 0x006db06c, 0x91010100, 0xc88fc000, 
    0x006cc000, 0xe1010200, 0x00000000, 0x00000000, 0x00000000
};
